#!/bin/bash
# SCRIPT: tsm_scheduler.sh
# AUTHOR George R
# DATE: 170513
# FUNCTION: Manage TSM scheduler
# NOTE: must use bash as shell else functions dont work as expected
# AUTHOR: Matt Grant
# FUNCTION: Fixed up script to work consistently
# DATE: 121214
### BEGIN INIT INFO
# Provides: dsmc sched
# Required-Start: $local_fs $remote_fs $network
# Required-Stop:
# Default-Start: 3 5
# Default-Stop: 0 1 2 6
# Short-Description: TSM ischeduler
# Description: Start dsmc sched to enable scheduler.
### END INIT INFO

# Exit if there is an unexpected error, in case of possible damage from continuing
set -e

# work out where dsmc is installed, and run from for sensible working directory
DAEMON="dsmc"
DSMC_BIN=`which $DAEMON`
# Be nice if TSM uninstalled
[ -x "${DSMC_BIN}" ] || exit 0

TSM_BIN=`readlink -f ${DSMC_BIN}`
TSM_BIN_DIR=`dirname ${TSM_BIN}`

check ()
# check status of scheduler return 0 if found else return 1
{
	return pgrep $DAEMON > /dev/null 2>&1
}

start () {
	# CD to sane directory, Do the double fork, etc
	echo -n "Starting ${DAEMON}... "
	cd $TSM_BIN_DIR; nohup $DSMC_BIN sched 0<&- &>/dev/null &
	echo "done."
}

stop ()
#
{
  echo -n "Stopping ${DAEMON}... "
PID=`ps -ef | grep "${DSMC_BIN}" | grep -v grep | tr -s " " " " | cut -d " " -f2` || true
if [ -z "$PID" ]; then
	# Not running...
	echo "not running."
	return 0
fi
# double check
if ! ps -p "$PID" -o comm | tail -n1 | grep -q "$DAEMON"; then
  echo "NOT stopping $PID - not correct process."
  exit 1
else
  kill $PID
fi
echo "done."
}

restart ()
#
{
	stop
	sleep 5
	start
}

status () {
	if ps -ef | grep "$DAEMON" | grep -v grep > /dev/null; then
  		echo "Scheduler appears to be running"
	else
  		echo "Scheduler appears NOT to be running"
	fi
}

usage ()
#
{
	echo "$0 [start|stop|restart|status]"
	echo ""
	echo "This scripts manages the TSM scheduler for this Server"
}

# script starts
case $1 in
	"start")
		start
		;;
	"stop") 
		stop
		;;
	"restart")
		restart
		;;
	"status")
       		status
		;;
	*) usage ;;
esac

